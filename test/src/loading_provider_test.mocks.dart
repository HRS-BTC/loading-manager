// Mocks generated by Mockito 5.4.4 from annotations
// in loading_manager/test/src/loading_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:inherited_rxdart/inherited_rxdart.dart' as _i3;
import 'package:loading_manager/src/loading_manager.dart' as _i5;
import 'package:loading_manager/src/loading_state.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoadingState_0 extends _i1.SmartFake implements _i2.LoadingState {
  _FakeLoadingState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompositeSubscription_1 extends _i1.SmartFake
    implements _i3.CompositeSubscription {
  _FakeCompositeSubscription_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBehaviorSubject_2<T> extends _i1.SmartFake
    implements _i3.BehaviorSubject<T> {
  _FakeBehaviorSubject_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_3<T1> extends _i1.SmartFake implements _i4.Future<T1> {
  _FakeFuture_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoadingManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadingManager extends _i1.Mock implements _i5.LoadingManager {
  @override
  _i2.LoadingState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLoadingState_0(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeLoadingState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.LoadingState);

  @override
  _i3.CompositeSubscription get compositeSubscription => (super.noSuchMethod(
        Invocation.getter(#compositeSubscription),
        returnValue: _FakeCompositeSubscription_1(
          this,
          Invocation.getter(#compositeSubscription),
        ),
        returnValueForMissingStub: _FakeCompositeSubscription_1(
          this,
          Invocation.getter(#compositeSubscription),
        ),
      ) as _i3.CompositeSubscription);

  @override
  List<_i3.Subject<dynamic>> get rxSubjects => (super.noSuchMethod(
        Invocation.getter(#rxSubjects),
        returnValue: <_i3.Subject<dynamic>>[],
        returnValueForMissingStub: <_i3.Subject<dynamic>>[],
      ) as List<_i3.Subject<dynamic>>);

  @override
  _i3.BehaviorSubject<_i2.LoadingState> get stateChangedSubject =>
      (super.noSuchMethod(
        Invocation.getter(#stateChangedSubject),
        returnValue: _FakeBehaviorSubject_2<_i2.LoadingState>(
          this,
          Invocation.getter(#stateChangedSubject),
        ),
        returnValueForMissingStub: _FakeBehaviorSubject_2<_i2.LoadingState>(
          this,
          Invocation.getter(#stateChangedSubject),
        ),
      ) as _i3.BehaviorSubject<_i2.LoadingState>);

  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void initLoadingManager() => super.noSuchMethod(
        Invocation.method(
          #initLoadingManager,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<T> pushFuture<T>({required _i4.Future<T>? future}) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushFuture,
          [],
          {#future: future},
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #pushFuture,
                  [],
                  {#future: future},
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_3<T>(
              this,
              Invocation.method(
                #pushFuture,
                [],
                {#future: future},
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #pushFuture,
                  [],
                  {#future: future},
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_3<T>(
              this,
              Invocation.method(
                #pushFuture,
                [],
                {#future: future},
              ),
            ),
      ) as _i4.Future<T>);

  @override
  void push({int? amount = 1}) => super.noSuchMethod(
        Invocation.method(
          #push,
          [],
          {#amount: amount},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pop({int? amount = 1}) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [],
          {#amount: amount},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushAmount({required int? amount}) => super.noSuchMethod(
        Invocation.method(
          #pushAmount,
          [],
          {#amount: amount},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerForStateChanged(_i4.Stream<_i2.LoadingState>? stream) =>
      super.noSuchMethod(
        Invocation.method(
          #registerForStateChanged,
          [stream],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerEventHandler<T>(
    _i4.Stream<T>? stream,
    _i3.RxEventHandler<T>? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #registerEventHandler,
          [
            stream,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void closeLater(List<_i3.Subject<dynamic>>? subjects) => super.noSuchMethod(
        Invocation.method(
          #closeLater,
          [subjects],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void closeReleasableLater(List<_i3.ReleasableSubjects>? subjects) =>
      super.noSuchMethod(
        Invocation.method(
          #closeReleasableLater,
          [subjects],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
